<%@ Template Language="C#" TargetLanguage="Text" Description="入口文件" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="CodeSmith.Engine.Json.Linq" %>

<%@ Property Name="Tables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Optional="False" Description="要生成代码的表集合" %>
<%@ Property Name="RootNameSpace" Type="System.String" Default="xxx项目" Optional="False" Category="General" Description="项目名称" %>
<%@ Property Name="JsonFile" Type="System.String" Category="File" Description="json文件的路径"  Editor="System.Windows.Forms.Design.FileNameEditor, System.Design" %>

<!-- #include file="common\\utils.cst" -->
项目名称：<%= RootNameSpace %>

<%
#region json文件加载 & 解析为JObject

JObject json = JObject.Parse(File.ReadAllText(JsonFile));

#endregion

#region 模板获取

// vue3 - 列表
CodeTemplate vue3IndexTemplate = GetCodeTemplate("\\vue\\index.vue3.cst");

// vue3 - 添加编辑
// CodeTemplate vue3AddOrEditTemplate = GetCodeTemplate("\\vue\\addOrEdit.vue3.cst");

// vue3 - 添加
CodeTemplate vue3AddTemplate = GetCodeTemplate("\\vue\\add.vue3.cst");

// vue3 - 编辑
CodeTemplate vue3EditTemplate = GetCodeTemplate("\\vue\\edit.vue3.cst");

// js - api
CodeTemplate jsApiTemplate = GetCodeTemplate("\\js\\api.cst");

#endregion

#region 指定输出目录 & 渲染解析模版

for(int i = 0; i < Tables.Count; i++)
{
    // json中不存在表数据
    JToken extTableJson = json[Tables[i].Name];
    if(extTableJson == null) {
        Response.WriteLine("【失败无表json数据】：" + Tables[i].Name);
        continue;
    }
    
    // vue3 - 列表
    string vue3IndexDirectory = OutputDirectory + "\\" + RootNameSpace + "\\vue\\view\\" + SnakeFormatHump(Tables[i].Name) + "\\index.vue";
    RenderFileUsingProperties(vue3IndexDirectory, true, ref vue3IndexTemplate, Tables[i], extTableJson);
    
    // vue3 - 添加编辑
    // string vue3AddOrEditDirectory = OutputDirectory + "\\" + RootNameSpace + "\\vue\\view\\" + SnakeFormatHump(Tables[i].Name) + "\\addOrEdit.vue";
    // RenderFileUsingProperties(vue3AddOrEditDirectory, true, ref vue3AddOrEditTemplate, Tables[i], extTableJson);
    
    // vue3 - 添加
    string vue3AddDirectory = OutputDirectory + "\\" + RootNameSpace + "\\vue\\view\\" + SnakeFormatHump(Tables[i].Name) + "\\add.vue";
    RenderFileUsingProperties(vue3AddDirectory, true, ref vue3AddTemplate, Tables[i], extTableJson);
    
    // vue3 - 编辑
    string vue3EditDirectory = OutputDirectory + "\\" + RootNameSpace + "\\vue\\view\\" + SnakeFormatHump(Tables[i].Name) + "\\edit.vue";
    RenderFileUsingProperties(vue3EditDirectory, true, ref vue3EditTemplate, Tables[i], extTableJson);

    // js - api
    string jsApiDirectory = OutputDirectory + "\\" + RootNameSpace + "\\vue\\api\\" + SnakeFormatHump(Tables[i].Name) + ".js";
    RenderFileUsingProperties(jsApiDirectory, true, ref jsApiTemplate, Tables[i], extTableJson);
}

#endregion
%>

完成！
<script runat="template">

#region Properties 属性定义
	
    #region Output 文件输出

    private string _outputDirectory = String.Empty;
	
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[OptionalAttribute]
	[Category("General")]
	[Description("生成结果的输出目录")]
	[DefaultValue("")]
	public string  OutputDirectory
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return CodeTemplateInfo.DirectoryName + "\\out";
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
    
	#endregion
	
#endregion

</script>
