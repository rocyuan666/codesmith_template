<%@ Template Language="C#" TargetLanguage="Text" Description="js api模板" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>


<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="所基于的表" %>

<!-- #include file="..\\common\\utils.cst" -->
<!-- #include file="..\\common\\mapTypeTransform.cst" -->
import { apiRequest } from '@/utils/apiRequest'
// eslint-disable-next-line no-unused-vars
import ActionResult from '@/utils/ActionResult'

<%--
    数据模型
--%>
/**
 * @typedef <%= SnakeFormatHump(SourceTable.Name, true) %> - <%= SourceTable.Description %>
 <% for(int i = 0; i < SourceTable.Columns.Count; i++) { %>
 * @property {<%= DbTypeToJsType(SourceTable.Columns[i].DataType) %>} <%= SourceTable.Columns[i].Name %> - <%= SourceTable.Columns[i].Description %>
 <% } %>
 */

<%--
    api接口请求
--%>
/**
 * 查询 <%= SourceTable.Description %> 列表
 * @param {<%= SnakeFormatHump(SourceTable.Name, true) %>} sendData
 * @returns {Promise<ActionResult<<%= SnakeFormatHump(SourceTable.Name, true) %>[]>>}
 */
export function list<%= SnakeFormatHump(SourceTable.Name, true) %>(sendData) {
    /** @type {import('@/utils/apiRequest').ApiConfig<<%= SnakeFormatHump(SourceTable.Name, true) %>>} */
    const sendObj = {
        url: '/api/<%= SourceTable.Name %>/list',
        method: 'GET',
        data: sendData,
    }
    return apiRequest(sendObj)
}

/**
 * 查询 <%= SourceTable.Description %> 详细
 * @param {<%= SnakeFormatHump(SourceTable.Name, true) %>} sendData
 * @returns {Promise<ActionResult<<%= SnakeFormatHump(SourceTable.Name, true) %>>>}
 */
export function detail<%= SnakeFormatHump(SourceTable.Name, true) %>(sendData) {
    /** @type {import('@/utils/apiRequest').ApiConfig<<%= SnakeFormatHump(SourceTable.Name, true) %>>} */
    const sendObj = {
        url: '/api/<%= SourceTable.Name %>/detail',
        method: 'GET',
        data: sendData,
    }
    return apiRequest(sendObj)
}

/**
 * 新增 <%= SourceTable.Description %>
 * @param {<%= SnakeFormatHump(SourceTable.Name, true) %>} sendData
 * @returns {Promise<ActionResult<Number>>}
 */
export function add<%= SnakeFormatHump(SourceTable.Name, true) %>(sendData) {
    /** @type {import('@/utils/apiRequest').ApiConfig<<%= SnakeFormatHump(SourceTable.Name, true) %>>} */
    const sendObj = {
        url: '/api/<%= SourceTable.Name %>/add',
        method: 'POST',
        data: sendData,
    }
    return apiRequest(sendObj)
}

/**
 * 修改 <%= SourceTable.Description %>
 * @param {<%= SnakeFormatHump(SourceTable.Name, true) %>} sendData
 * @returns {Promise<ActionResult<Number>>}
 */
export function edit<%= SnakeFormatHump(SourceTable.Name, true) %>(sendData) {
    /** @type {import('@/utils/apiRequest').ApiConfig<<%= SnakeFormatHump(SourceTable.Name, true) %>>} */
    const sendObj = {
        url: '/api/<%= SourceTable.Name %>/edit',
        method: 'POST',
        data: sendData,
    }
    return apiRequest(sendObj)
}

/**
 * 删除 <%= SourceTable.Description %>
 * @param {<%= SnakeFormatHump(SourceTable.Name, true) %>} sendData
 * @returns {Promise<ActionResult<Number>>}
 */
export function del<%= SnakeFormatHump(SourceTable.Name, true) %>(sendData) {
    /** @type {import('@/utils/apiRequest').ApiConfig<<%= SnakeFormatHump(SourceTable.Name, true) %>>} */
    const sendObj = {
        url: '/api/<%= SourceTable.Name %>/del',
        method: 'POST',
        data: sendData,
    }
    return apiRequest(sendObj)
}
