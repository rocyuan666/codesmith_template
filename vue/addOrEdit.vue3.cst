<%@ Template Language="C#" TargetLanguage="Text" Description="vue3模板" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.Engine.Json.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="所基于的表" %>
<%@ Property Name="ExtInfo" Type="JToken" Category="Context" Description="表额外数据" %>

<!-- #include file="..\\common\\utils.cst" -->
<!-- #include file="..\\common\\mapTypeTransform.cst" -->
<%
#region 添加是否有配置校验

Boolean isAddCheck = false;
for(int i = 0; i < SourceTable.Columns.Count; i++)
{
    string fieldName = SourceTable.Columns[i].Name;
    if((Boolean)ExtInfo[fieldName]["add"] == true && (Boolean)ExtInfo[fieldName]["required"] == true)
    {
        isAddCheck = true;
        break;
    }
}

#endregion

#region 字典类型收集

List<String> dicts = new List<String>();

for(int i = 0; i < SourceTable.Columns.Count; i++)
{
    String tableName = SourceTable.Columns[i].Name;
    if((String)ExtInfo[tableName]["dict"] != "" && (String)ExtInfo[tableName]["dict"] != "0")
    {
        if((String)ExtInfo[tableName]["display"] == "select" || (String)ExtInfo[tableName]["display"] == "radio" || (String)ExtInfo[tableName]["display"] == "checkbox")
        {
            if(!dicts.Contains((String)ExtInfo[tableName]["dict"]))
            {
                dicts.Add((String)ExtInfo[tableName]["dict"]);
            }
        }
    }
}

#endregion
%>
<template>
    <el-dialog :title="title" v-model="open" width="800px" append-to-body draggable>
        <el-form ref="<%= SnakeFormatHump(SourceTable.Name) %>Ref" :model="form.row" :rules="rules" label-width="80px">
            <%-- 循环字段 --%>
            <% for(int i = 0; i < SourceTable.Columns.Count; i++) { %>
            <%
                // 字段名
                String fieldName = SourceTable.Columns[i].Name;
                // 字段是否是主键
                Boolean isPK = SourceTable.PrimaryKey.MemberColumns[0].Name == fieldName;
                if(isPK)
                {
                    continue;
                }
                // 字段是否设置编辑
                Boolean isEdit = (Boolean)ExtInfo[fieldName]["edit"];
            %>
            <%-- 判断字段是否设置添加 --%>
            <% if((Boolean)ExtInfo[fieldName]["add"] == true) { %>
            <%-- 判断字段对应的表单类型 --%>
            <% if((String)ExtInfo[fieldName]["display"] == "input") { %>
            <%-- 文本框 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <el-input v-model="form.row.<%= fieldName %>" placeholder="请输入<%= ExtInfo[fieldName]["label"] %>" />
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "textarea") { %>
            <%-- 文本域 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <el-input v-model="form.row.<%= fieldName %>" type="textarea" placeholder="请输入<%= ExtInfo[fieldName]["label"] %>" />
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "select") { %>
            <%-- 下拉框 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <el-select v-model="form.row.<%= fieldName %>" placeholder="请选择<%= ExtInfo[fieldName]["label"] %>">
                    <% if((String)ExtInfo[fieldName]["dict"] == "" || (String)ExtInfo[fieldName]["dict"] == "0") { %>
                    <el-option label="请手动写入选项 或者 选择字典生成" value="" />
                    <% } else { %>
                    <el-option v-for="dict in <%= ExtInfo[fieldName]["dict"] %>" :key="dict.value" :label="dict.label" :value="dict.value" />
                    <% } %>
                </el-select>
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "radio") { %>
            <%-- 单选框 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <el-radio-group v-model="form.row.<%= fieldName %>">
                    <% if((String)ExtInfo[fieldName]["dict"] == "" || (String)ExtInfo[fieldName]["dict"] == "0") { %>
                    <el-radio label="1">请手动写入选项 或者 选择字典生成</el-radio>
                    <% } else { %>
                    <el-radio v-for="dict in <%= ExtInfo[fieldName]["dict"] %>" :key="dict.value" :label="dict.value">{{dict.label}}</el-radio>
                    <% } %>
                </el-radio-group>
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "checkbox") { %>
            <%-- 复选框 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <el-checkbox-group v-model="form.row.<%= fieldName %>">
                    <% if((String)ExtInfo[fieldName]["dict"] == "" || (String)ExtInfo[fieldName]["dict"] == "0") { %>
                    <el-checkbox label="1">请手动写入选项 或者 选择字典生成</el-checkbox>
                    <% } else { %>
                    <el-checkbox v-for="dict in <%= ExtInfo[fieldName]["dict"] %>" :key="dict.value" :label="dict.value">{{dict.label}}</el-checkbox>
                    <% } %>
                </el-checkbox-group>
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "datetime") { %>
            <%-- 日期时间 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <el-date-picker clearable v-model="form.row.<%= fieldName %>" type="date" value-format="YYYY-MM-DD" placeholder="请选择<%= ExtInfo[fieldName]["label"] %>"></el-date-picker>
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "imageUpload") { %>
            <%-- 图片上传 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <image-upload v-model="form.row.<%= fieldName %>"/>
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "fileUpload") { %>
            <%-- 文件上传 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <file-upload v-model="form.row.<%= fieldName %>"/>
            </el-form-item>
            <% } else if((String)ExtInfo[fieldName]["display"] == "editor") { %>
            <%-- 富文本控件 --%>
            <el-form-item label="<%= ExtInfo[fieldName]["label"] %>" prop="<%= fieldName %>">
                <editor v-model="form.row.<%= fieldName %>" :min-height="192" />
            </el-form-item>
            <% } %>
            <% } %>
            <% } %>
        </el-form>
        <template #footer>
            <div class="dialog-footer">
                <el-button type="primary" @click="submitForm" v-autoBlur>确 定</el-button>
                <el-button @click="cancel" v-autoBlur>取 消</el-button>
            </div>
        </template>
    </el-dialog>
</template>

<script setup name="<%= SnakeFormatHump(SourceTable.Name, true) %>AddOrEdit">
import { ref, getCurrentInstance, toRefs, reactive } from 'vue'
import { add<%= SnakeFormatHump(SourceTable.Name, true) %>, edit<%= SnakeFormatHump(SourceTable.Name, true) %>, detail<%= SnakeFormatHump(SourceTable.Name, true) %> } from '@/api/<%= SnakeFormatHump(SourceTable.Name) %>'

const { proxy } = getCurrentInstance()
<%
String dictsDot = "";
String dictsArgs = "";
for(int i = 0; i < dicts.Count; i++)
{
    if(i != dicts.Count - 1){
        dictsDot += dicts[i] + ", ";
        dictsArgs += "'" + dicts[i] + "'" + ", ";
    }else {
        dictsDot += dicts[i];
        dictsArgs += "'" + dicts[i] + "'";
    }
}
%>
<% if(dictsDot != "") { %>
const { <%= dictsDot %> } = proxy.useDict(<%= dictsArgs %>)
<% } %>

/**
 * 原data 类型
 * @typedef TargetData
 * @property {Object} form
 * @property {import('@/api/faAdmin').FaAdmin | Object} form.row
 * @property {import('element-plus').FormRules<import('@/api/faAdmin').FaAdmin>} rules
 */


/**@type {UnwrapNestedRefs<TargetData>} */
const data = reactive({
    form: {
        row: {},
    },
<% if(isAddCheck) { %>
    rules: {
        <% for(int i = 0; i < SourceTable.Columns.Count; i++) { %>
        <% String fieldName = SourceTable.Columns[i].Name; %>
        <% if((Boolean)ExtInfo[fieldName]["add"] == true && (Boolean)ExtInfo[fieldName]["required"] == true) { %>
        <%= fieldName %>: [{ required: true, message: '<%= ExtInfo[fieldName]["label"] %>必填', trigger: 'change' }],
        <% } %>
        <% } %>
    },
<% } else { %>
    rules: {},
<% } %>
})

/**@type {ToRef<UnwrapNestedRefs<TargetData>["form"]>} */
const form = toRefs(data).form

/**@type {ToRef<UnwrapNestedRefs<TargetData>["rules"]>} */
const rules = toRefs(data).rules

/**@type {import('vue').Ref<Boolean>} */
const open = ref(false)

/**@type {import('vue').Ref<String>} */
const title = ref('')

/**@type {EmitFn<string[]>} */
const emits = defineEmits(['updateList'])

/** 提交按钮 */
function submitForm() {
    proxy.$refs['<%= SnakeFormatHump(SourceTable.Name) %>Ref'].validate((valid) => {
        if (valid) {
            if (form.value.row.id != null) {
                edit<%= SnakeFormatHump(SourceTable.Name, true) %>(form.value).then(() => {
                    proxy.$modal.msgSuccess('修改成功')
                    open.value = false
                    emits('updateList')
                })
            } else {
                add<%= SnakeFormatHump(SourceTable.Name, true) %>(form.value).then(() => {
                    proxy.$modal.msgSuccess('新增成功')
                    open.value = false
                    emits('updateList')
                })
            }
        }
    })
}

/** 取消按钮 */
function cancel() {
    open.value = false
    reset()
}

/** 表单重置 */
function reset() {
    form.value.row = {
        <%-- 循环字段 --%>
        <% for(int i = 0; i < SourceTable.Columns.Count; i++) { %>
        <% String fieldName = SourceTable.Columns[i].Name; %>
        <%-- 判断字段是否设置添加 --%>
        <% if((Boolean)ExtInfo[fieldName]["add"] == true) { %>
        <%-- 判断字段对应的表单类型 --%>
        <% if((String)ExtInfo[fieldName]["display"] == "checkbox") { %>
        <%= fieldName %>: [],
        <% } else { %>
        <%= fieldName %>: null,
        <% } %>
        <% } %>
        <% } %>
    }
    proxy.resetForm('<%= SnakeFormatHump(SourceTable.Name) %>Ref')
}

/** 新增按钮操作 */
function handleAdd() {
    reset()
    open.value = true
    title.value = '添加'
}

/**
 * 修改按钮操作
 * @param {Number | String} id
 */
function handleEdit(id) {
    reset()
    detail<%= SnakeFormatHump(SourceTable.Name, true) %>({ id: id }).then((res) => {
        form.value.row = res.data
        open.value = true
        title.value = '修改'
    })
}

defineExpose({ handleAdd, handleEdit })
</script>

<style scoped lang="scss"></style>
